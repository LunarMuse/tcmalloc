// Copyright 2019 The TCMalloc Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "absl/types/span.h"
#include "tcmalloc/common.h"
#include "tcmalloc/internal/config.h"
#include "tcmalloc/size_class_info.h"

GOOGLE_MALLOC_SECTION_BEGIN
namespace tcmalloc {
namespace tcmalloc_internal {

// Columns in the following tables:
// - bytes: size of the size class
// - pages: number of pages per span
// - batch: preferred number of objects for transfers between caches
// - class: size class number
// - objs: number of objects per span
// - waste/fixed: fixed per-size-class overhead due to end-of-span fragmentation
//   and other factors. For instance, if we have a 96 byte size class, and use
//   a single 8KiB page, then we will hold 85 objects per span, and have 32
//   bytes left over. There is also a fixed component of 64 bytes of TCMalloc
//   metadata per span. Together, the fixed overhead would be wasted/allocated
//   = (32 + 64) / (8192 - 32) ~= 1.2%.
// - waste/sampling: overhead due to heap sampling
//   (rounding to page size, proxy object, metadata).
// - inc: increment from the previous size class. This caps the dynamic
//   overhead component based on mismatches between the number of bytes
//   requested and the number of bytes provided by the size class. Together
//   they sum to the total overhead; for instance if you asked for a 50-byte
//   allocation that rounds up to a 64-byte size class, the dynamic overhead
//   would be 28%, and if waste were 22% it would mean (on average) 25 bytes
//   of overhead for allocations of that size.

// clang-format off
#if defined(__cpp_aligned_new) && __STDCPP_DEFAULT_NEW_ALIGNMENT__ <= 8
#if TCMALLOC_PAGE_SHIFT == 13
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 64,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   class  objs |fixed sampling|    inc
  {     0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32},  //  1  1024  0.78%    0.42%   0.00%
  {    16,    1,   32},  //  2   512  0.78%    0.42% 100.00%
  {    32,    1,   32},  //  3   256  0.78%    0.42% 100.00%
  {    64,    1,   32},  //  4   128  0.78%    0.42% 100.00%
  {    80,    1,   32},  //  5   102  1.16%    0.42%  25.00%
  {    96,    1,   32},  //  6    85  1.16%    0.42%  20.00%
  {   112,    1,   32},  //  7    73  0.97%    0.42%  16.67%
  {   128,    1,   32},  //  8    64  0.78%    0.42%  14.29%
  {   160,    1,   32},  //  9    51  1.16%    0.42%  25.00%
  {   176,    1,   32},  // 10    46  1.94%    0.42%  10.00%
  {   208,    1,   32},  // 11    39  1.74%    0.42%  18.18%
  {   256,    1,   32},  // 12    32  0.78%    0.42%  23.08%
  {   312,    1,   32},  // 13    26  1.74%    0.42%  21.88%
  {   384,    1,   32},  // 14    21  2.33%    0.42%  23.08%
  {   448,    1,   32},  // 15    18  2.33%    0.42%  16.67%
  {   512,    1,   32},  // 16    16  0.78%    0.42%  14.29%
  {   576,    1,   32},  // 17    14  2.33%    0.42%  12.50%
  {   704,    1,   32},  // 18    11  6.20%    0.43%  22.22%
  {   896,    1,   32},  // 19     9  2.33%    0.42%  27.27%
  {  1024,    1,   32},  // 20     8  0.78%    0.42%  14.29%
  {  1152,    2,   32},  // 21    14  1.95%    0.42%  12.50%
  {  1408,    2,   32},  // 22    11  5.84%    0.43%  22.22%
  {  1792,    2,   32},  // 23     9  1.95%    0.43%  27.27%
  {  2048,    2,   32},  // 24     8  0.39%    0.42%  14.29%
  {  2688,    2,   24},  // 25     6  1.95%    0.43%  31.25%
  {  3456,    3,   18},  // 26     7  1.82%    0.43%  28.57%
  {  4096,    1,   16},  // 27     2  0.78%    0.43%  18.52%
  {  4736,    3,   13},  // 28     5  3.90%    0.43%  15.62%
  {  6144,    3,   10},  // 29     4  0.26%    0.42%  29.73%
  {  8192,    1,    8},  // 30     1  0.78%    0.03%  33.33%
  {  9472,    5,    6},  // 31     4  7.64%    0.85%  15.62%
  { 12288,    3,    5},  // 32     2  0.26%    0.82%  29.73%
  { 16384,    2,    4},  // 33     1  0.39%    0.03%  33.33%
  { 20480,    5,    3},  // 34     2  0.16%    1.21%  25.00%
  { 28672,    7,    2},  // 35     2  0.11%    1.60%  40.00%
  { 32768,    4,    2},  // 36     1  0.19%    0.03%  14.29%
  { 40960,    5,    2},  // 37     1  0.16%    0.03%  25.00%
  { 49152,    6,    2},  // 38     1  0.13%    0.03%  20.00%
  { 65536,    8,    2},  // 39     1  0.10%    0.03%  33.33%
  { 73728,    9,    2},  // 40     1  0.09%    0.03%  12.50%
  { 81920,   10,    2},  // 41     1  0.08%    0.03%  11.11%
  { 98304,   12,    2},  // 42     1  0.07%    0.03%  20.00%
  {114688,   14,    2},  // 43     1  0.06%    0.03%  16.67%
  {131072,   16,    2},  // 44     1  0.05%    0.03%  14.29%
  {155648,   19,    2},  // 45     1  0.04%    0.03%  18.75%
  {204800,   25,    2},  // 46     1  0.03%    0.03%  31.58%
  {262144,   32,    2},  // 47     1  0.02%    0.03%  28.00%
};
#elif TCMALLOC_PAGE_SHIFT == 15
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 64,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   class  objs |fixed sampling|    inc
  {     0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32},  //  1  4096  0.19%    1.60%   0.00%
  {    16,    1,   32},  //  2  2048  0.19%    1.60% 100.00%
  {    32,    1,   32},  //  3  1024  0.19%    1.60% 100.00%
  {    64,    1,   32},  //  4   512  0.19%    1.60% 100.00%
  {    80,    1,   32},  //  5   409  0.34%    1.60%  25.00%
  {    96,    1,   32},  //  6   341  0.29%    1.60%  20.00%
  {   112,    1,   32},  //  7   292  0.39%    1.60%  16.67%
  {   128,    1,   32},  //  8   256  0.19%    1.60%  14.29%
  {   160,    1,   32},  //  9   204  0.58%    1.60%  25.00%
  {   176,    1,   32},  // 10   186  0.29%    1.60%  10.00%
  {   208,    1,   32},  // 11   157  0.54%    1.60%  18.18%
  {   256,    1,   32},  // 12   128  0.19%    1.60%  23.08%
  {   312,    1,   32},  // 13   105  0.22%    1.60%  21.88%
  {   400,    1,   32},  // 14    81  1.32%    1.60%  28.21%
  {   448,    1,   32},  // 15    73  0.39%    1.60%  12.00%
  {   512,    1,   32},  // 16    64  0.19%    1.60%  14.29%
  {   640,    1,   32},  // 17    51  0.58%    1.60%  25.00%
  {   768,    1,   32},  // 18    42  1.75%    1.60%  20.00%
  {   896,    1,   32},  // 19    36  1.75%    1.60%  16.67%
  {  1024,    1,   32},  // 20    32  0.19%    1.60%  14.29%
  {  1280,    1,   32},  // 21    25  2.53%    1.60%  25.00%
  {  1536,    1,   32},  // 22    21  1.75%    1.60%  20.00%
  {  2048,    1,   32},  // 23    16  0.19%    1.60%  33.33%
  {  2304,    1,   28},  // 24    14  1.75%    1.60%  12.50%
  {  2688,    1,   24},  // 25    12  1.75%    1.60%  16.67%
  {  3200,    1,   20},  // 26    10  2.53%    1.60%  19.05%
  {  4096,    1,   16},  // 27     8  0.19%    1.60%  28.00%
  {  4608,    1,   14},  // 28     7  1.75%    1.60%  12.50%
  {  5376,    1,   12},  // 29     6  1.75%    1.60%  16.67%
  {  6528,    1,   10},  // 30     5  0.58%    1.60%  21.43%
  {  8192,    1,    8},  // 31     4  0.19%    1.60%  25.49%
  { 10880,    1,    6},  // 32     3  0.58%    1.60%  32.81%
  { 13952,    3,    4},  // 33     7  0.72%    1.60%  28.24%
  { 16384,    1,    4},  // 34     2  0.19%    1.60%  17.43%
  { 21760,    2,    3},  // 35     3  0.49%    1.60%  32.81%
  { 26112,    4,    2},  // 36     5  0.44%    1.60%  20.00%
  { 32768,    1,    2},  // 37     1  0.19%    0.03%  25.49%
  { 40960,    4,    2},  // 38     3  6.30%    3.28%  25.00%
  { 54528,    5,    2},  // 39     3  0.20%    3.16%  33.12%
  { 65536,    2,    2},  // 40     1  0.10%    0.03%  20.19%
  { 81920,    5,    2},  // 41     2  0.04%    4.72%  25.00%
  { 98304,    3,    2},  // 42     1  0.07%    0.03%  20.00%
  {114688,    7,    2},  // 43     2  0.03%    6.28%  16.67%
  {131072,    4,    2},  // 44     1  0.05%    0.03%  14.29%
  {163840,    5,    2},  // 45     1  0.04%    0.03%  25.00%
  {229376,    7,    2},  // 46     1  0.03%    0.03%  40.00%
  {262144,    8,    2},  // 47     1  0.02%    0.03%  14.29%
};
#elif TCMALLOC_PAGE_SHIFT == 18
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 64,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   class  objs |fixed sampling|    inc
  {     0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32},  //  1 32768  0.02%   12.53%   0.00%
  {    16,    1,   32},  //  2 16384  0.02%   12.53% 100.00%
  {    32,    1,   32},  //  3  8192  0.02%   12.53% 100.00%
  {    64,    1,   32},  //  4  4096  0.02%   12.53% 100.00%
  {    80,    1,   32},  //  5  3276  0.05%   12.53%  25.00%
  {    88,    1,   32},  //  6  2978  0.05%   12.53%  10.00%
  {   104,    1,   32},  //  7  2520  0.05%   12.53%  18.18%
  {   128,    1,   32},  //  8  2048  0.02%   12.53%  23.08%
  {   160,    1,   32},  //  9  1638  0.05%   12.53%  25.00%
  {   200,    1,   32},  // 10  1310  0.08%   12.53%  25.00%
  {   256,    1,   32},  // 11  1024  0.02%   12.53%  28.00%
  {   304,    1,   32},  // 12   862  0.06%   12.53%  18.75%
  {   384,    1,   32},  // 13   682  0.12%   12.53%  26.32%
  {   448,    1,   32},  // 14   585  0.05%   12.53%  16.67%
  {   512,    1,   32},  // 15   512  0.02%   12.53%  14.29%
  {   576,    1,   32},  // 16   455  0.05%   12.53%  12.50%
  {   704,    1,   32},  // 17   372  0.12%   12.53%  22.22%
  {   832,    1,   32},  // 18   315  0.05%   12.53%  18.18%
  {  1024,    1,   32},  // 19   256  0.02%   12.53%  23.08%
  {  1152,    1,   32},  // 20   227  0.27%   12.53%  12.50%
  {  1408,    1,   32},  // 21   186  0.12%   12.53%  22.22%
  {  1664,    1,   32},  // 22   157  0.37%   12.53%  18.18%
  {  2048,    1,   32},  // 23   128  0.02%   12.53%  23.08%
  {  2560,    1,   25},  // 24   102  0.41%   12.53%  25.00%
  {  3072,    1,   21},  // 25    85  0.41%   12.53%  20.00%
  {  3584,    1,   18},  // 26    73  0.22%   12.53%  16.67%
  {  4096,    1,   16},  // 27    64  0.02%   12.53%  14.29%
  {  4480,    1,   14},  // 28    58  0.90%   12.54%   9.38%
  {  5120,    1,   12},  // 29    51  0.41%   12.53%  14.29%
  {  6528,    1,   10},  // 30    40  0.41%   12.53%  27.50%
  {  8192,    1,    8},  // 31    32  0.02%   12.53%  25.49%
  {  9344,    1,    7},  // 32    28  0.22%   12.53%  14.06%
  { 11392,    1,    5},  // 33    23  0.07%   12.53%  21.92%
  { 13696,    1,    4},  // 34    19  0.76%   12.54%  20.22%
  { 16384,    1,    4},  // 35    16  0.02%   12.53%  19.63%
  { 20096,    1,    3},  // 36    13  0.37%   12.54%  22.66%
  { 23808,    1,    2},  // 37    11  0.12%   12.53%  18.47%
  { 29056,    1,    2},  // 38     9  0.27%   12.54%  22.04%
  { 32768,    1,    2},  // 39     8  0.02%   12.53%  12.78%
  { 37376,    1,    2},  // 40     7  0.22%   12.54%  14.06%
  { 43648,    1,    2},  // 41     6  0.12%   12.54%  16.78%
  { 52352,    1,    2},  // 42     5  0.17%   12.54%  19.94%
  { 65536,    1,    2},  // 43     4  0.02%   12.53%  25.18%
  { 87296,    1,    2},  // 44     3  0.12%   12.54%  33.20%
  {104832,    2,    2},  // 45     5  0.04%   12.54%  20.09%
  {131072,    1,    2},  // 46     2  0.02%   12.53%  25.03%
  {149760,    3,    2},  // 47     5  4.79%   12.88%  14.26%
  {174720,    2,    2},  // 48     3  0.04%   12.54%  16.67%
  {209664,    4,    2},  // 49     5  0.03%   12.54%  20.00%
  {262144,    1,    2},  // 50     1  0.02%    0.03%  25.03%
};
#elif TCMALLOC_PAGE_SHIFT == 12
static_assert(kMaxSize == 8192, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = false,
  .span_size = 64,
  .sampling_interval = 524288,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   class  objs |fixed sampling|    inc
  {     0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32},  //  1   512  1.54%    0.91%   0.00%
  {    16,    1,   32},  //  2   256  1.54%    0.91% 100.00%
  {    32,    1,   32},  //  3   128  1.54%    0.91% 100.00%
  {    64,    1,   32},  //  4    64  1.54%    0.91% 100.00%
  {    80,    1,   32},  //  5    51  1.92%    0.91%  25.00%
  {    96,    1,   32},  //  6    42  3.08%    0.91%  20.00%
  {   128,    1,   32},  //  7    32  1.54%    0.91%  33.33%
  {   144,    1,   32},  //  8    28  3.08%    0.91%  12.50%
  {   160,    1,   32},  //  9    25  3.85%    0.92%  11.11%
  {   208,    1,   32},  // 10    19  5.00%    0.92%  30.00%
  {   256,    1,   32},  // 11    16  1.54%    0.91%  23.08%
  {   288,    1,   32},  // 12    14  3.08%    0.92%  12.50%
  {   368,    1,   32},  // 13    11  2.69%    0.92%  27.78%
  {   512,    1,   32},  // 14     8  1.54%    0.92%  39.13%
  {   576,    2,   32},  // 15    14  2.33%    0.92%  12.50%
  {   768,    2,   32},  // 16    10  6.98%    0.92%  33.33%
  {  1024,    2,   32},  // 17     8  0.78%    0.92%  33.33%
  {  1536,    3,   32},  // 18     8  0.52%    0.92%  50.00%
  {  2048,    4,   32},  // 19     8  0.39%    0.92%  33.33%
  {  2688,    4,   24},  // 20     6  1.95%    0.92%  31.25%
  {  3200,    4,   20},  // 21     5  2.72%    0.93%  19.05%
  {  4096,    4,   16},  // 22     4  0.39%    0.92%  28.00%
  {  4736,    5,   13},  // 23     4  7.79%    1.77%  15.62%
  {  6144,    3,   10},  // 24     2  0.52%    1.70%  29.73%
  {  8192,    4,    8},  // 25     2  0.39%    1.70%  33.33%
};
#else
#error "Unsupported TCMALLOC_PAGE_SHIFT value!"
#endif
#else
#if TCMALLOC_PAGE_SHIFT == 13
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 64,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   class  objs |fixed sampling|    inc
  {     0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32},  //  1  1024  0.78%    0.42%   0.00%
  {    16,    1,   32},  //  2   512  0.78%    0.42% 100.00%
  {    32,    1,   32},  //  3   256  0.78%    0.42% 100.00%
  {    64,    1,   32},  //  4   128  0.78%    0.42% 100.00%
  {    80,    1,   32},  //  5   102  1.16%    0.42%  25.00%
  {    96,    1,   32},  //  6    85  1.16%    0.42%  20.00%
  {   112,    1,   32},  //  7    73  0.97%    0.42%  16.67%
  {   128,    1,   32},  //  8    64  0.78%    0.42%  14.29%
  {   160,    1,   32},  //  9    51  1.16%    0.42%  25.00%
  {   176,    1,   32},  // 10    46  1.94%    0.42%  10.00%
  {   208,    1,   32},  // 11    39  1.74%    0.42%  18.18%
  {   256,    1,   32},  // 12    32  0.78%    0.42%  23.08%
  {   320,    1,   32},  // 13    25  3.10%    0.42%  25.00%
  {   384,    1,   32},  // 14    21  2.33%    0.42%  20.00%
  {   448,    1,   32},  // 15    18  2.33%    0.42%  16.67%
  {   512,    1,   32},  // 16    16  0.78%    0.42%  14.29%
  {   576,    1,   32},  // 17    14  2.33%    0.42%  12.50%
  {   704,    1,   32},  // 18    11  6.20%    0.43%  22.22%
  {   896,    1,   32},  // 19     9  2.33%    0.42%  27.27%
  {  1024,    1,   32},  // 20     8  0.78%    0.42%  14.29%
  {  1152,    2,   32},  // 21    14  1.95%    0.42%  12.50%
  {  1408,    2,   32},  // 22    11  5.84%    0.43%  22.22%
  {  1792,    2,   32},  // 23     9  1.95%    0.43%  27.27%
  {  2048,    2,   32},  // 24     8  0.39%    0.42%  14.29%
  {  2688,    2,   24},  // 25     6  1.95%    0.43%  31.25%
  {  3456,    3,   18},  // 26     7  1.82%    0.43%  28.57%
  {  4096,    1,   16},  // 27     2  0.78%    0.43%  18.52%
  {  4736,    3,   13},  // 28     5  3.90%    0.43%  15.62%
  {  6144,    3,   10},  // 29     4  0.26%    0.42%  29.73%
  {  8192,    1,    8},  // 30     1  0.78%    0.03%  33.33%
  {  9472,    5,    6},  // 31     4  7.64%    0.85%  15.62%
  { 12288,    3,    5},  // 32     2  0.26%    0.82%  29.73%
  { 16384,    2,    4},  // 33     1  0.39%    0.03%  33.33%
  { 20480,    5,    3},  // 34     2  0.16%    1.21%  25.00%
  { 28672,    7,    2},  // 35     2  0.11%    1.60%  40.00%
  { 32768,    4,    2},  // 36     1  0.19%    0.03%  14.29%
  { 40960,    5,    2},  // 37     1  0.16%    0.03%  25.00%
  { 49152,    6,    2},  // 38     1  0.13%    0.03%  20.00%
  { 65536,    8,    2},  // 39     1  0.10%    0.03%  33.33%
  { 73728,    9,    2},  // 40     1  0.09%    0.03%  12.50%
  { 81920,   10,    2},  // 41     1  0.08%    0.03%  11.11%
  { 98304,   12,    2},  // 42     1  0.07%    0.03%  20.00%
  {114688,   14,    2},  // 43     1  0.06%    0.03%  16.67%
  {131072,   16,    2},  // 44     1  0.05%    0.03%  14.29%
  {155648,   19,    2},  // 45     1  0.04%    0.03%  18.75%
  {204800,   25,    2},  // 46     1  0.03%    0.03%  31.58%
  {262144,   32,    2},  // 47     1  0.02%    0.03%  28.00%
};
#elif TCMALLOC_PAGE_SHIFT == 15
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 64,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   class  objs |fixed sampling|    inc
  {     0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32},  //  1  4096  0.19%    1.60%   0.00%
  {    16,    1,   32},  //  2  2048  0.19%    1.60% 100.00%
  {    32,    1,   32},  //  3  1024  0.19%    1.60% 100.00%
  {    64,    1,   32},  //  4   512  0.19%    1.60% 100.00%
  {    80,    1,   32},  //  5   409  0.34%    1.60%  25.00%
  {    96,    1,   32},  //  6   341  0.29%    1.60%  20.00%
  {   112,    1,   32},  //  7   292  0.39%    1.60%  16.67%
  {   128,    1,   32},  //  8   256  0.19%    1.60%  14.29%
  {   160,    1,   32},  //  9   204  0.58%    1.60%  25.00%
  {   176,    1,   32},  // 10   186  0.29%    1.60%  10.00%
  {   208,    1,   32},  // 11   157  0.54%    1.60%  18.18%
  {   256,    1,   32},  // 12   128  0.19%    1.60%  23.08%
  {   320,    1,   32},  // 13   102  0.58%    1.60%  25.00%
  {   400,    1,   32},  // 14    81  1.32%    1.60%  25.00%
  {   448,    1,   32},  // 15    73  0.39%    1.60%  12.00%
  {   512,    1,   32},  // 16    64  0.19%    1.60%  14.29%
  {   640,    1,   32},  // 17    51  0.58%    1.60%  25.00%
  {   768,    1,   32},  // 18    42  1.75%    1.60%  20.00%
  {   896,    1,   32},  // 19    36  1.75%    1.60%  16.67%
  {  1024,    1,   32},  // 20    32  0.19%    1.60%  14.29%
  {  1280,    1,   32},  // 21    25  2.53%    1.60%  25.00%
  {  1536,    1,   32},  // 22    21  1.75%    1.60%  20.00%
  {  2048,    1,   32},  // 23    16  0.19%    1.60%  33.33%
  {  2304,    1,   28},  // 24    14  1.75%    1.60%  12.50%
  {  2688,    1,   24},  // 25    12  1.75%    1.60%  16.67%
  {  3200,    1,   20},  // 26    10  2.53%    1.60%  19.05%
  {  4096,    1,   16},  // 27     8  0.19%    1.60%  28.00%
  {  4608,    1,   14},  // 28     7  1.75%    1.60%  12.50%
  {  5376,    1,   12},  // 29     6  1.75%    1.60%  16.67%
  {  6528,    1,   10},  // 30     5  0.58%    1.60%  21.43%
  {  8192,    1,    8},  // 31     4  0.19%    1.60%  25.49%
  { 10880,    1,    6},  // 32     3  0.58%    1.60%  32.81%
  { 13952,    3,    4},  // 33     7  0.72%    1.60%  28.24%
  { 16384,    1,    4},  // 34     2  0.19%    1.60%  17.43%
  { 21760,    2,    3},  // 35     3  0.49%    1.60%  32.81%
  { 26112,    4,    2},  // 36     5  0.44%    1.60%  20.00%
  { 32768,    1,    2},  // 37     1  0.19%    0.03%  25.49%
  { 40960,    4,    2},  // 38     3  6.30%    3.28%  25.00%
  { 54528,    5,    2},  // 39     3  0.20%    3.16%  33.12%
  { 65536,    2,    2},  // 40     1  0.10%    0.03%  20.19%
  { 81920,    5,    2},  // 41     2  0.04%    4.72%  25.00%
  { 98304,    3,    2},  // 42     1  0.07%    0.03%  20.00%
  {114688,    7,    2},  // 43     2  0.03%    6.28%  16.67%
  {131072,    4,    2},  // 44     1  0.05%    0.03%  14.29%
  {163840,    5,    2},  // 45     1  0.04%    0.03%  25.00%
  {229376,    7,    2},  // 46     1  0.03%    0.03%  40.00%
  {262144,    8,    2},  // 47     1  0.02%    0.03%  14.29%
};
#elif TCMALLOC_PAGE_SHIFT == 18
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 64,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   class  objs |fixed sampling|    inc
  {     0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32},  //  1 32768  0.02%   12.53%   0.00%
  {    16,    1,   32},  //  2 16384  0.02%   12.53% 100.00%
  {    32,    1,   32},  //  3  8192  0.02%   12.53% 100.00%
  {    64,    1,   32},  //  4  4096  0.02%   12.53% 100.00%
  {    80,    1,   32},  //  5  3276  0.05%   12.53%  25.00%
  {    96,    1,   32},  //  6  2730  0.05%   12.53%  20.00%
  {   128,    1,   32},  //  7  2048  0.02%   12.53%  33.33%
  {   160,    1,   32},  //  8  1638  0.05%   12.53%  25.00%
  {   192,    1,   32},  //  9  1365  0.05%   12.53%  20.00%
  {   256,    1,   32},  // 10  1024  0.02%   12.53%  33.33%
  {   304,    1,   32},  // 11   862  0.06%   12.53%  18.75%
  {   384,    1,   32},  // 12   682  0.12%   12.53%  26.32%
  {   448,    1,   32},  // 13   585  0.05%   12.53%  16.67%
  {   512,    1,   32},  // 14   512  0.02%   12.53%  14.29%
  {   576,    1,   32},  // 15   455  0.05%   12.53%  12.50%
  {   704,    1,   32},  // 16   372  0.12%   12.53%  22.22%
  {   832,    1,   32},  // 17   315  0.05%   12.53%  18.18%
  {  1024,    1,   32},  // 18   256  0.02%   12.53%  23.08%
  {  1152,    1,   32},  // 19   227  0.27%   12.53%  12.50%
  {  1408,    1,   32},  // 20   186  0.12%   12.53%  22.22%
  {  1664,    1,   32},  // 21   157  0.37%   12.53%  18.18%
  {  2048,    1,   32},  // 22   128  0.02%   12.53%  23.08%
  {  2560,    1,   25},  // 23   102  0.41%   12.53%  25.00%
  {  3072,    1,   21},  // 24    85  0.41%   12.53%  20.00%
  {  3584,    1,   18},  // 25    73  0.22%   12.53%  16.67%
  {  4096,    1,   16},  // 26    64  0.02%   12.53%  14.29%
  {  4480,    1,   14},  // 27    58  0.90%   12.54%   9.38%
  {  5120,    1,   12},  // 28    51  0.41%   12.53%  14.29%
  {  6528,    1,   10},  // 29    40  0.41%   12.53%  27.50%
  {  8192,    1,    8},  // 30    32  0.02%   12.53%  25.49%
  {  9344,    1,    7},  // 31    28  0.22%   12.53%  14.06%
  { 11392,    1,    5},  // 32    23  0.07%   12.53%  21.92%
  { 13696,    1,    4},  // 33    19  0.76%   12.54%  20.22%
  { 16384,    1,    4},  // 34    16  0.02%   12.53%  19.63%
  { 20096,    1,    3},  // 35    13  0.37%   12.54%  22.66%
  { 23808,    1,    2},  // 36    11  0.12%   12.53%  18.47%
  { 29056,    1,    2},  // 37     9  0.27%   12.54%  22.04%
  { 32768,    1,    2},  // 38     8  0.02%   12.53%  12.78%
  { 37376,    1,    2},  // 39     7  0.22%   12.54%  14.06%
  { 43648,    1,    2},  // 40     6  0.12%   12.54%  16.78%
  { 52352,    1,    2},  // 41     5  0.17%   12.54%  19.94%
  { 65536,    1,    2},  // 42     4  0.02%   12.53%  25.18%
  { 74880,    2,    2},  // 43     7  0.04%   12.53%  14.26%
  { 87296,    1,    2},  // 44     3  0.12%   12.54%  16.58%
  {104832,    2,    2},  // 45     5  0.04%   12.54%  20.09%
  {131072,    1,    2},  // 46     2  0.02%   12.53%  25.03%
  {149760,    3,    2},  // 47     5  4.79%   12.88%  14.26%
  {174720,    2,    2},  // 48     3  0.04%   12.54%  16.67%
  {209664,    4,    2},  // 49     5  0.03%   12.54%  20.00%
  {262144,    1,    2},  // 50     1  0.02%    0.03%  25.03%
};
#elif TCMALLOC_PAGE_SHIFT == 12
static_assert(kMaxSize == 8192, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = false,
  .span_size = 64,
  .sampling_interval = 524288,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   class  objs |fixed sampling|    inc
  {     0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32},  //  1   512  1.54%    0.91%   0.00%
  {    16,    1,   32},  //  2   256  1.54%    0.91% 100.00%
  {    32,    1,   32},  //  3   128  1.54%    0.91% 100.00%
  {    64,    1,   32},  //  4    64  1.54%    0.91% 100.00%
  {    80,    1,   32},  //  5    51  1.92%    0.91%  25.00%
  {    96,    1,   32},  //  6    42  3.08%    0.91%  20.00%
  {   128,    1,   32},  //  7    32  1.54%    0.91%  33.33%
  {   144,    1,   32},  //  8    28  3.08%    0.91%  12.50%
  {   160,    1,   32},  //  9    25  3.85%    0.92%  11.11%
  {   208,    1,   32},  // 10    19  5.00%    0.92%  30.00%
  {   256,    1,   32},  // 11    16  1.54%    0.91%  23.08%
  {   288,    1,   32},  // 12    14  3.08%    0.92%  12.50%
  {   368,    1,   32},  // 13    11  2.69%    0.92%  27.78%
  {   512,    1,   32},  // 14     8  1.54%    0.92%  39.13%
  {   576,    2,   32},  // 15    14  2.33%    0.92%  12.50%
  {   768,    2,   32},  // 16    10  6.98%    0.92%  33.33%
  {  1024,    2,   32},  // 17     8  0.78%    0.92%  33.33%
  {  1536,    3,   32},  // 18     8  0.52%    0.92%  50.00%
  {  2048,    4,   32},  // 19     8  0.39%    0.92%  33.33%
  {  2688,    4,   24},  // 20     6  1.95%    0.92%  31.25%
  {  3200,    4,   20},  // 21     5  2.72%    0.93%  19.05%
  {  4096,    4,   16},  // 22     4  0.39%    0.92%  28.00%
  {  4736,    5,   13},  // 23     4  7.79%    1.77%  15.62%
  {  6144,    3,   10},  // 24     2  0.52%    1.70%  29.73%
  {  8192,    4,    8},  // 25     2  0.39%    1.70%  33.33%
};
#else
#error "Unsupported TCMALLOC_PAGE_SHIFT value!"
#endif
#endif
// clang-format on

static_assert(sizeof(List) / sizeof(List[0]) <= kNumBaseClasses);
extern constexpr SizeClasses kSizeClasses{List, Assumptions};

}  // namespace tcmalloc_internal
}  // namespace tcmalloc
GOOGLE_MALLOC_SECTION_END
